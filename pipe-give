#!/bin/bash

trap callstack ERR

set -o errexit \
    -o pipefail \
    -o nounset

global_msg_level=info
prog_name="${0##*/}"

function msg() {
    if [[ "$#" -ne 2 ]]; then
        printf "[%s] %s: (%s) %s" "$(logdate)" "$prog_name" "fatal" "incorrect number of arguments provided to msg function"
        exit 1
    fi

    local level="$1"
    local message="$2"
    local active_level="${global_msg_level:-none}"

    local -A levels=([none]=0 [fatal]=1 [error]=2 [warn]=3 [info]=4 [debug]=5)
    local num_level="${levels[$level]}"
    local num_active_level="${levels[$active_level]}"

    if [[ "$num_level" -le "${num_active_level}" ]]; then
        printf "[%s] %s: (%s) %s\n" "$(logdate)" "$prog_name" "$level" "$message" >&2
    fi
    if [[ "$level" == "fatal" ]]; then
        if [[ "${debug_mode:-false}" == "true" ]]; then
            callstack
        else
            exit 1
        fi
    fi
}

function logdate() {
    date +"%F %T"
}

function callstack() {
    echo --- Trace: ---
    local i
    # These arrays start at index 0, but 0 is this callstack function, so skip it.
    for ((i=1; i<${#FUNCNAME[*]}; i++)) do
        if [[ $i -ne 1 ]]; then
            echo -n "  "  
        fi
        echo "${BASH_SOURCE[$i]}: in \"${FUNCNAME[$i]}\" called from line ${BASH_LINENO[$i]}"
    done
    echo --------------
    exit 1
}

function cleanup_dir() {
    if [[ -d "$fifo_dir" ]]; then
        rm -rf -- "${fifo_dir}"
    fi
}

function must_have_cmds() {
    for cmd in "$@"; do
        command -v "$cmd" >/dev/null 2>/dev/null || msg fatal "this script needs a working copy of '$cmd' but could not find one"
    done
}

must_have_cmds tar mkfifo mktemp stat date chmod hostname sed /usr/bin/getopt

###########

# Arg Parsing -- not a lot

help_message="
usage: $prog_name [-h|-d] <file>...

A script to quickly copy files to another user on the same node.

The user you are copying the file to should run the equivalent receive
 command, and you should tell them the ID and password for the transfer.

Transfer passwords are single-use, so don't worry about giving them to
 someone else.

Flags:
   -h, --help        Show this help.
   -d, --debug       Debug mode.

Args:
   <file>...         One or more files to transfer.

Examples:
   $prog_name my_file        Set up a transfer for a file called \"my_file\".
   $prog_name f_1 f_2        Set up a single transfer for two files, \"f_1\" and \"f_2\".

   $prog_name my_dir         Set up a transfer for a directory called \"my_dir\".
"

function show_help_and_exit() {
    printf "%s" "$help_message"
    exit "${1:-0}"
}

canonical_args="$(
/usr/bin/getopt \
    -n pipe-give \
    -l "help,debug" \
    -o "hd" \
    -- \
    "$@"
)"

eval set -- "$canonical_args"

# Defaults
debug_mode="false"

while true ; do
    case "$1" in
        -h|--help) show_help_and_exit; shift ;;
        -d|--debug) debug_mode="true"; shift ;;
        --) shift ; break ;;
        *) msg fatal "invalid argument '$1'" ; exit 1 ;;
    esac
done

if [[ $# -eq 0 ]]; then
    show_help_and_exit 1
fi

if [[ "$debug_mode" == "true" ]]; then
  # We don't have a proper debug mode, so just set the bash tracing options.
  set -v -x
else
  # If not in debug mode, remove the callstack printer from the error handler.
  trap ERR
fi

##########

# Okay, that's all the setup handled.


# Allow use of alternative temporary directories, but...
tmpdir="${TMPDIR:-/tmp}"

# ... check the TMPDIR has the permissions we need.
tmpdir_perms="$(stat --printf=%a -- "$tmpdir")"

if [[ "$tmpdir_perms" != "1777" ]]; then
    msg fatal "cannot use TMPDIR to transfer data, does not have appropriate permissions"
fi

fifo_dir="$(mktemp -d -p "$tmpdir" -t "pipe-transfer.XXXXXXXX")"
fifo_suffix="${fifo_dir##*.}"

# If we get interrupted or finish, remove the fifo directory
trap cleanup_dir EXIT

# Set proper public perms on fifo directory
chmod a+rx "$fifo_dir"

# Make one for password and info, one for transferring data.
# It's like we're reinventing ftp woo
mkfifo -- "$fifo_dir/ctrl" "$fifo_dir/data"

# Both sides have to be able to use the ctrl fifo
chmod a+w "$fifo_dir/ctrl"

if [[ "${RANDOM:-}" == "" ]]; then
    msg fatal "bash random number generator has been broken, cannot continue"
fi

# Get the hostname to let people know what node they're on.
this_hostname="$(hostname -s)"

# Make a password to *kind* of authenticate transfers.
transfer_pass="$RANDOM$RANDOM$RANDOM$RANDOM$RANDOM"
transfer_pass="${transfer_pass:1:9}"
printf "
Your transfer ID: %s
    and password: %s

Please enter this at receiver.

Remember you must be on the same node.

This node is: %s

    [Ctrl-C to cancel.]
" "$fifo_suffix" "$transfer_pass" "$this_hostname"


# TODO: use openssl to use password to encrypt sample data, to make this actually secure at all.
# Hm. Since it's a one-time-use credential, I don't *think* it matters.

# Allow several tries.
allow_tries=3
tries=0
correct_pass=0

while [[ "$tries" -lt "$allow_tries" ]]; do
    pass_recv="$(cat -- "$fifo_dir/ctrl")"

    if [[ "$pass_recv" == "$transfer_pass" ]]; then
        correct_pass=1
        break
    else
        tries="$(( tries + 1 ))"
        if [[ "$(( allow_tries - tries ))" -eq 0 ]]; then
            echo "too many tries" >"$fifo_dir/ctrl"
            msg fatal "maximum number of password attempts exceeded, quitting."
            # Juuuuuust in case msg fatal doesn't exit, for some reason.
            exit 5
        fi

        msg warn "received incorrect transfer password! $(( allow_tries - tries )) tries remaining."
        echo "incorrect password" >"$fifo_dir/ctrl"
        continue
    fi
done

if [[ "$correct_pass" == 0 ]]; then
    # Safety rail just in case of a logic failure.
    exit 6
fi

# So by this point, we have a correct password, in theory.
echo "correct password" >"$fifo_dir/ctrl"
msg info "received correct password"

# It occurs to me that without actually saying, nowhere in this process
#  have we told the receiver who the sender is
msg info "sending identity and number of files" 
echo "sending user:$(whoami)" >"$fifo_dir/ctrl"
echo "sending file count:$#" >"$fifo_dir/ctrl"

# Send the list of files for receiver approval
msg info "sending file listing to receiver for approval"
# tar does a bunch of safety transformations to the filenames,
#  we replicate them so the receiver can see what will be received
# - take off every path component up to a ../ or ./
# - take off any leading /
printf "%s\n" "$@" | sed -e 's_^.*/\.\./_/_' -e 's_^\.\./_/_' -e 's_^/__' >"$fifo_dir/data"

confirmation="$(cat -- "$fifo_dir/ctrl")"
if [[ "$confirmation" == "reject" ]]; then
    msg fatal "the transfer was rejected by the receiver"
elif [[ "$confirmation" != "confirm" ]]; then
    msg fatal "invalid message was received while confirming listing"
else
    msg info "confirmation received"
fi

# Work out whether we have a working pv but if we don't, no worries.
if command -v pv >/dev/null 2>/dev/null; then
    PV=pv
elif command -v /shared/ucl/apps/pv/1.6.6/bin/pv >/dev/null 2>/dev/null; then
    PV=/shared/ucl/apps/pv/1.6.6/bin/pv
else
    PV="(none)"
    msg warn "could not find pv -- transfer speed display will not be shown"
fi

msg info "transferring files..."

# Run the actual transfer, piping tar to the data fifo.
if [[ "$PV" == "(none)" ]]; then
    tar -cv -- "$@" >"$fifo_dir/data" || msg fatal "there was a problem while transferring the files D:"
else
    tar -cv -- "$@" | "$PV" >"$fifo_dir/data" || msg fatal "there was a problem while transferring the files D:"
fi

msg info "transfer complete"

# See if the receiver reported success, so we know whether can, e.g. delete the original files.
acknowledgement="$(cat -- "$fifo_dir/ctrl")"
if [[ "$acknowledgement" == "problem" ]]; then
    msg warn "the receiver reported a problem, files may not have transferred successfully"
fi

