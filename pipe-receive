#!/bin/bash

trap callstack ERR

set -o errexit \
    -o pipefail \
    -o nounset

function msg() {
    if [[ "$#" -ne 2 ]]; then
        printf "[%s] %s: (%s) %s" "$(logdate)" "$0" "fatal" "incorrect number of arguments provided to msg function"
        exit 1
    fi

    local level="$1"
    local message="$2"
    local active_level="${global_msg_level:-none}"

    local -A levels=([none]=0 [fatal]=1 [error]=2 [warn]=3 [info]=4 [debug]=5)
    local num_level="${levels[$level]}"
    local num_active_level="${levels[$active_level]}"

    if [[ "$num_level" -le "${num_active_level}" ]]; then
        printf "[%s] %s: (%s) %s\n" "$(logdate)" "$0" "$level" "$message" >&2
    fi
    if [[ "$level" == "fatal" ]]; then
        callstack
    fi
}

function callstack() {
    echo --- Trace: ---
    local i
    # These arrays start at index 0, but 0 is this callstack function, so skip it.
    for ((i=1; i<${#FUNCNAME[*]}; i++)) do
        if [ "$i" -ne 1 ]; then
            echo -n "  "  
        fi
        echo "${BASH_SOURCE[$i]}: in \"${FUNCNAME[$i]}\" called from line ${BASH_LINENO[$i]}"
    done
    echo --------------
    exit 1
}

# TODO: improve
if [[ "$#" -ne 0 ]]; then
    echo "Usage: $0" >&2
    exit 0
fi

read -r -p "Please enter your transfer ID: " transfer_id 

transfer_fifo_dir="${TMPDIR:-/tmp}/pipe-transfer.$transfer_id"

if [[ ! -d "$transfer_fifo_dir" ]]; then
    msg fatal "could not find a transfer with that id"
fi

# Got ID, try password
result=""

while [[ "$result" != "correct password" ]]; do
    read -r -p "Please enter transfer password: " transfer_password

    echo "$transfer_password" >"$transfer_fifo_dir/ctrl"

    result="$(cat "$transfer_fifo_dir/ctrl")"
done

msg info "password correct, receiving files"

tar -xvk <"$transfer_fifo_dir/data" || msg fatal "there was a problem transferring the files D:"
